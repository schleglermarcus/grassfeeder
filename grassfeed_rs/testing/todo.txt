To Do List


	- Marking of Messages, Favorites

- Shutdown signal handling  https://docs.rs/signal-hook/latest/signal_hook/



Drag extra care:
	- https://www.netjstech.com/
	- https://www.extremnews.com/
	- https://menprovement.com/
	- https://therationalmale.com/2021/06/25/sizzle-amp-steak/
	- https://www.bitchute.com/video/ovTONsjus1wC/
	- Dragging the same element 2x







Later:
- GTK4: block multiple instances
- process both sets of cmd parameters:   application   AND gtk, see runner_internal
	https://docs.gtk.org/gio/method.Application.run.html
- Systray Icon integration

- Windows  Build, Gui
  https://github.com/gabdube/native-windows-gui/tree/master/showcase
  https://www.ebbflow.io/blog/vending-win
	https://gtk-rs.org/gtk4-rs/git/book/installation_windows.html







Perhaps:
- Keybard configuration in settings
- Updating Sources:  prioritize by tree position, expanded flag
- Http download stream api,   falschzitate_blogspot.xml     http://falschzitate.blogspot.com/feeds/posts/default
- Feed-Import with progress bar ?
- Do extra recognition  to process   invalid feed titles  containg  &     :      dieneuewelle.xml
- Grouping of feeds by folders ?

- Reduce Size of Binary:
  https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html



No more
- startup:  delayed creation of dialogs not good, they need to be present for the menu
- Browser  enable theme related colors  -->  1. We can't get the theme background color  2. We cannot set the browser foreground color


-----

* Get the branch and test it:
  git clone -b  v0_0_5  https://github.com/schleglermarcus/grassfeeder gf-v005


* Merge Branch and build release
  git checkout main
  git merge origin/v0_0_3
  git commit
  git push origin main
  cd grassfeed_rs/app-gtk3-linux/ ; ./docker-stage2.sh

* Put the work folder back to main
  git checkout main
  git pull
	git status

* Create new Branch
	git branch v0_0_4
	git checkout v0_0_4
  git push -u origin v0_0_4
  git branch --set-upstream-to=origin/v0_0_4 v0_0_4



-----

Other feed readers:
https://github.com/martinrotter/rssguard
https://github.com/AlduinApp/alduin
https://github.com/hello-efficiency-inc/raven-reader


// https://www.debian.org/doc/manuals/maint-guide/dreq.en.html#changelog
// https://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog
// https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers
//  dpkg-deb -i 	grassfeeder.deb
https://github.com/marketplace/actions/rust-release-binary
https://mateuscosta.me/rust-releases-with-github-actions
https://daniellockyer.com/automated-rust-releases/


https://crates.io/crates/rustc_version/
https://lib.rs/crates/ci_info
https://www.gtk.org/docs/installations/windows/

Desktop:
https://nora.codes/tutorial/speedy-desktop-apps-with-gtk-and-rust/


------ AppImage

https://github.com/AppImage/appimage.github.io

https://lib.rs/crates/cargo-appimage
https://docs.appimage.org/packaging-guide/index.html

https://docs.appimage.org/reference/best-practices.html#binaries-compiled-on-old-enough-base-system

https://distrowatch.com/table.php?distribution=mint
## The ingredients used in your AppImage should not be built on a more recent base system than the oldest base system your AppImage is intended to run on.
## Install appimagetool AppImage
#sudo chmod +x /usr/local/bin/appimagetool
# ./grassfeeder.AppImage --appimage-extract






------ dylib
https://prog.world/building-and-using-dynamic-link-libraries-in-rust/
https://zicklag.github.io/rust-tutorials/rust-plugins.html
https://robert.kra.hn/posts/2022-09-09-speeding-up-incremental-rust-compilation-with-dylibs/
https://stackoverflow.com/questions/tagged/dynamic-library+rust
https://users.rust-lang.org/t/what-is-the-difference-between-dylib-and-cdylib/28847
https://doc.rust-lang.org/reference/linkage.html
https://stackoverflow.com/questions/44169635/rust-cargo-dylib-clarification



------ DOCKER
Docker:  3 Phasen:  aus,   build, run
	https://kerkour.com/rust-small-docker-image#/from-buster-slim
	https://windsoilder.github.io/writing_dockerfile_in_rust_project.html
https://middleware.io/blog/docker-cleanup/
# docker image prune
# docker  system prune


-------------------
GTK_DEBUG=interactive
	https://docs.gtk.org/gio/class.Application.html
	https://wiki.gnome.org/HowDoI/GtkApplication
	https://developer.gnome.org/documentation/tutorials/application.html
	https://docs.gtk.org/gio/method.Application.run.html

-------------------






cat /proc/1/smaps |grep -i pagesize  |sort -u
KernelPageSize:        4 kB


/proc/self/statm


https://www.kernel.org/doc/Documentation/filesystems/proc.txt

Table 1-3: Contents of the statm files (as of 2.6.8-rc3)
..............................................................................
 Field    Content
 size     total program size (pages)		(same as VmSize in status)
 resident size of memory portions (pages)	(same as VmRSS in status)
 shared   number of pages that are shared	(i.e. backed by a file, same
						as RssFile+RssShmem in status)
 trs      number of pages that are 'code'	(not including libs; broken,
							includes data segment)
 lrs      number of pages of library		(always 0 on 2.6)
 drs      number of pages of data/stack		(including libs; broken,
							includes library text)
 dt       number of dirty pages			(always 0 on 2.6)
..............................................................................
