To Do List




------ Create Ubuntu package
	https://help.launchpad.net/Packaging/PPA/BuildingASourcePackage

https://launchpad.net/grassfeeder


	https://packaging.ubuntu.com/html/
	https://packaging.ubuntu.com/html/packaging-new-software.html
	https://shallowsky.com/blog/programming/packaging-launchpad-ppas.html
	https://stackoverflow.com/questions/10994746/how-would-i-make-debian-package-with-dsc-with-dpkg-build
  https://help.launchpad.net/Packaging/PPA/BuildingASourcePackage
  https://help.launchpad.net/Packaging/PPA/Uploading
  https://launchpad.net/ubuntu/focal/+source/rust-pad
  https://packaging.ubuntu.com/html/packaging-new-software.html
  https://ubuntuforums.org/showthread.php?t=1624438
  https://blog.chmouel.com/2021/01/31/building-packages-for-multiple-distros-on-launchpad-with-docker/


- Debian+Ubuntu+Mint, Suse, Arch,  MX-Linux, Manjaro, CentOs, , Gentoo
	https://wiki.debian.org/Packaging/Intro
	https://wiki.debian.org/HowToPackageForDebian
  https://www.debian.org/doc/manuals/developers-reference/pkgs.html#newpackage
	https://wiki.debian.org/DebianMentorsFaq
	https://wiki.debian.org/Teams/RustPackaging
  https://blog.packagecloud.io/buildling-debian-packages-with-debuild/
  https://www.systutorials.com/docs/linux/man/5-dsc/
  https://www.debian.org/doc/devel-manuals#debmake-doc
  https://medium.com/@mezgani/how-to-create-debian-package-cccef6e5175b

-


Hackerjet: This tool "debcargo" does not work wit submodules-by-path
  https://blog.hackeriet.no/packaging-a-rust-project-for-debian/
  https://blog.hackeriet.no/packaging-rust-part-II/
  https://salsa.debian.org/rust-team/debcargo-conf/





Later:

- Use different app-indicator  lib
- 02 Apr 2023 :  update GTK  to  features, new Version compatible to ubuntu20
- GTK4: block multiple instances
- GTK4: process both sets of cmd parameters:   application   AND gtk, see runner_internal
	https://docs.gtk.org/gio/method.Application.run.html
- Systray Icon integration


- Alternatives for Gui:
   https://wasmer.io/posts/wasm-as-universal-binary-format-part-1-native-executables
	 https://slint-ui.com/blog/rust-and-cpp.html

- Windows  Build, Gui
  https://github.com/gabdube/native-windows-gui/tree/master/showcase
  https://www.ebbflow.io/blog/vending-win
	https://gtk-rs.org/gtk4-rs/git/book/installation_windows.html
- Appimage Deploy https://github.com/AppImage/appimage.github.io
  https://github.com/AppImage/appimage.github.io/pull/3051

- Extra Features for Websites feed urls
	  reddit -> feed url
		bitchute:   https://www.bitchute.com/feeds/rss/channel/CHANNELNAME



Perhaps:
- Keybard configuration in settings
- Updating Sources:  prioritize by tree position, expanded flag
- Http download stream api,   falschzitate_blogspot.xml     http://falschzitate.blogspot.com/feeds/posts/default
- Feed-Opml-Import with progress bar ?


No more
- startup:  delayed creation of dialogs not good, they need to be present for the menu
- Browser  enable theme related colors  -->  1. We can't get the theme background color  2. We cannot set the browser foreground color
- Drag extra care:
    www.extremnews.com: address provided is broken
		therationalmale.com:  title in feed is empty
- Reduce Size of Binary:   https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html




---------------

* Get the branch and test it:
  git clone -b  v0_0_5  https://github.com/schleglermarcus/grassfeeder gf-v005


* Merge Branch and build release
  git checkout main
  git merge origin/v0_0_3
  git commit
  git push origin main
  cd grassfeed_rs/app-gtk3-linux/ ; ./debian-stage2.sh

* Put the work folder back to main
  git checkout main
  git pull
  git status

* Create new Branch
	git branch v0_0_4
	git checkout v0_0_4
  git push -u origin v0_0_4
  git branch --set-upstream-to=origin/v0_0_4 v0_0_4



-----

Other feed readers:
https://github.com/martinrotter/rssguard
https://github.com/AlduinApp/alduin
https://github.com/hello-efficiency-inc/raven-reader


// https://www.debian.org/doc/manuals/maint-guide/dreq.en.html#changelog
// https://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog
// https://docs.rs/chrono/latest/chrono/format/strftime/index.html#specifiers
//  dpkg-deb -i 	grassfeeder.deb
https://github.com/marketplace/actions/rust-release-binary
https://mateuscosta.me/rust-releases-with-github-actions
https://daniellockyer.com/automated-rust-releases/


https://crates.io/crates/rustc_version/
https://lib.rs/crates/ci_info
https://www.gtk.org/docs/installations/windows/

Desktop:
https://nora.codes/tutorial/speedy-desktop-apps-with-gtk-and-rust/

Linux Iso download:
  https://mirrorcache.opensuse.org/download/distribution/leap/15.2/iso/
	https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/33/

------ Gnome Desktop:

appimage /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_ABI_DT_RELR' not found (required by /tmp/.mount /lib64/libm.so.6)



Samba mount:
#  apt-get install cifs-utils

# /etc/fstab:
//kav/workspacer	/mnt/kav 		cifs 	noauto,rw,user,exec,vers=2.1		0 0

# sudo chmod u+s   /bin/mount /bin/umount   /usr/sbin/mount.cifs 	/sbin/mount.cifs


# nano ~/.bashrc

gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"
test -s ~/.alias && . ~/.alias || true
alias l="ls -l --color"
findmnt /mnt/kav || mount /mnt/kav
rsync -av  --delete /mnt/kav/gfdist ~/


crates.io download:                   https://crates.io/api/v1/crates/webpki/0.22.0/download



------ AppImage
https://github.com/AppImage/appimage.github.io
https://lib.rs/crates/cargo-appimage
https://docs.appimage.org/packaging-guide/index.html
https://docs.appimage.org/reference/best-practices.html#binaries-compiled-on-old-enough-base-system
https://distrowatch.com/table.php?distribution=mint
## The ingredients used in your AppImage should not be built on a more recent base system than the oldest base system your AppImage is intended to run on.
## Install appimagetool AppImage
#sudo chmod +x /usr/local/bin/appimagetool
# ./grassfeeder.AppImage --appimage-extract





#  gpg --fingerprint schleglermarcus@posteo.de
gpg: Die Benutzung der Hashmethode SHA256 ist im --compliance=pgp6 Modus nicht erlaubt.
gpg: Diese Botschaft könnte für PGP 6.x unbrauchbar sein
pub   rsa4096 2022-11-12 [SC] [verfällt: 2024-11-11]
      2457 9093 9B8F D40D C29D  0EF9 C28E BCE0 F940 E69F
uid        [uneingeschränkt] schleglermarcus <schleglermarcus@posteo.de>

#  gpg --keyserver keyserver.ubuntu.com --send-keys "2457 9093 9B8F D40D C29D  0EF9 C28E BCE0 F940 E69F"
gpg: Die Benutzung der Hashmethode SHA256 ist im --compliance=pgp6 Modus nicht erlaubt.
gpg: Diese Botschaft könnte für PGP 6.x unbrauchbar sein
gpg: sende Schlüssel C28EBCE0F940E69F auf hkp://keyserver.ubuntu.com

Uploading grassfeeder using ftp to ppa (host: ppa.launchpad.net; directory: ~schleglermarcus/grassfeeder-ppa)
running supported-distribution: check whether the target distribution is currently supported (using distro-info)
{'allowed': ['release'], 'known': ['release', 'proposed', 'updates', 'backports', 'security']}
running required-fields: check whether a field is present and non-empty in the changes file
running checksum: verify checksums before uploading
running suite-mismatch: check the target distribution for common errors
running check-debs: makes sure the upload contains a binary package
running gpg: check GnuPG signatures before the upload
Uploading grassfeeder_0.1.7.dsc
Uploading grassfeeder_0.1.7.tar.gz
Uploading grassfeeder_0.1.7_source.buildinfo
Uploading grassfeeder_0.1.7_source.changes







--------------- Create debian packages
<marcus_der_schlegler> Hello, I am new here
<marcus_der_schlegler> I try to run the debcargo-conf  to publish my desktop application. But I am stuck with the requirement of it being "published on crates.i"
<marcus_der_schlegler> My application is a rust+gtk3  desktop application, that relies on several components and path dependencies.  Those shall not be published by 'cargo publish'.
<marcus_der_schlegler> I can create working debian packages already with cargo-deb.  Any next ideas how to proceed?
<noctis> hi, debcargo has basically no support for "off grid" crates. you likely need to follow the old manual path

<capitol> check how many of them that we already have packaged with debcargo
<capitol> https://crates.io/crates/debcargo
<capitol> sorry, cargo-debstatus i meant: https://crates.io/crates/cargo-debstatus
<capitol> it's getting late here

<capitol> check how many of them that we already have packaged with debcargo
<capitol> https://crates.io/crates/debcargo
<capitol> sorry, cargo-debstatus i meant: https://crates.io/crates/cargo-debstatus
<capitol> it's getting late here


<count_omega> that is being worked on by bastif and myself
<count_omega> may I ask which program you're trying to package ?
<count_omega> cargo-debstatus shows you conveniently which packes/crates are
missing. just run it against the cloned repo of the program.
<count_omega> https://paste.debian.net/1272973/
<marcus_der_schlegler> i see it.  2nd chapter are local repos, directly available.
<marcus_der_schlegler> for the other chapters, I am not sure what you mean with
   "from scratch". I guess they are not in the debian repo yet
<count_omega> didn't check 100% but I deleted all gtk-related stuff and packages
skipped by cargo-debstatus where a newer version is in debian. I'd suggest to
begin with with qname* , unic* and i18n stuff since that is the biggest chunk imho
<count_omega> yeah, they need packaging from scratch

<count_omega> didn't check 100% but I deleted all gtk-related stuff and packages
skipped by cargo-debstatus where a newer version is in debian. I'd suggest
to begin with with qname* , unic* and i18n stuff since that is the biggest chunk imho
<count_omega> yeah, they need packaging from scratch
<count_omega> It's a lot of packages, granted, even sans the gtk stuff. But
packaging a crate is straightforward and faster than a regular debian package
imho. if you want to dive in. I'd suggest thsi red
<count_omega> https://blog.hackeriet.no/packaging-a-rust-project-for-debian/
<count_omega> I'm sure most of the packages missing will be packaged by the
rust team, but likely not all of them
<count_omega> well the qname* stuff for instance would be an easy start
for packaging a rust crate

<count_omega> I meant since a big chuck of the crates your program uses are not in debian an official debian package will less likely happen cargo-deb is a good way to distribute it in the meantime. it's not an issur if you don't want to maintain all those crates
<count_omega> *issue
<count_omega> You could file a RPF (request for packaging bug ) againt the wnpp package
<count_omega> *against




<pabs> the rust team workflow relies on crates.io
<pabs> Jonas Smedegaard <dr@jones.dk> is the main person packaging
Rust stuff outside the Rust team, so maybe ask him about his workflow
<marcus_> Thanks @pabs. You mean I shall write him an e-mail directly? Is he expecting that? Or is there some other manual page that I could read ?
<pabs> yeah, send an email. should be fine. don't think he documented his setup yet
<pabs> tell him I sent you if you want


: needs crates.io
https://blog.hackeriet.no/packaging-a-rust-project-for-debian/
https://blog.hackeriet.no/packaging-rust-part-II/



------ dylib
https://prog.world/building-and-using-dynamic-link-libraries-in-rust/
https://zicklag.github.io/rust-tutorials/rust-plugins.html
https://robert.kra.hn/posts/2022-09-09-speeding-up-incremental-rust-compilation-with-dylibs/
https://stackoverflow.com/questions/tagged/dynamic-library+rust
https://users.rust-lang.org/t/what-is-the-difference-between-dylib-and-cdylib/28847
https://doc.rust-lang.org/reference/linkage.html
https://stackoverflow.com/questions/44169635/rust-cargo-dylib-clarification



------ DOCKER
Docker:  3 Phasen:  aus,   build, run
	https://kerkour.com/rust-small-docker-image#/from-buster-slim
	https://windsoilder.github.io/writing_dockerfile_in_rust_project.html
https://middleware.io/blog/docker-cleanup/
# docker image prune
# docker  system prune


-------------------
GTK_DEBUG=interactive
	https://docs.gtk.org/gio/class.Application.html
	https://wiki.gnome.org/HowDoI/GtkApplication
	https://developer.gnome.org/documentation/tutorials/application.html
	https://docs.gtk.org/gio/method.Application.run.html

-------------------

	##   xmlem-0.2.0/src/select.rs:48:1			48 | impl NonTSPseudoClass for Value ##		missing `has_zero_specificity` in implementation
    ##  xmlem-0.2.2  does not compile. xmlem-0.2.2/src/document.rs:377:42	##  let value = attr.unescape_value ().unwrap();	 ## help: there is a method with a similar name: `decode_and_unescape_value`


# xmlem = "=0.2.2"	 "=0.2.3"  # Produces error:
# error[E0599]: no method named `unescape_value` found for struct `Attribute` in the current scope
# .cargo/registry/src/github.com-1ecc6299db9ec823/xmlem-0.2.2/src/document.rs:373:42
#    373 |                         let value = attr.unescape_value().unwrap();
### xmlem = { version = "=0.2.1" }
# xmlem_l = { package="xmlem", optional=true, version="=0.2.0",  path = "../app-gtk3-debian/target/xmlem-0.2.0"}


##  xmlem-0.2.2  does not compile. xmlem-0.2.2/src/document.rs:377:42	##  let value = attr.unescape_value ().unwrap();	 ## help: there is a method with a similar name: `decode_and_unescape_value`
# F=target/xmlem-0.2.0/Cargo.toml
# mv $F ${F}.0		# downgrading   indexmap, once_cell, selectors, thin-slice, slotmap, unic-ucd , tracing
# cat ${F}.0 	 \
#     |sed -e "s/\"0.28.1\"/{version=\">=0.28\", path=\"..\/rust-cssparser-0.28.0\"\}  /" \
# 	|sed -e "s/\"1.8.1\"/\">=1.7.0\" /"	\
# 	|sed -e "s/\"1.10.0\"/\">=1.9.0\" /" \
# 	|sed -e "s/\"0.1.0\"/\{version=\"0.1.0\", path=\"..\/qname-0.1.0\"\}  /" \
# 	|sed -e "s/\"0.26.0\"/\{version=\">=0.27.1\", path=\"..\/quick-xml-0.27.1\"\}  /" \
# 	|sed -e "s/\"0.23.0\"/{version=\">=0.22.0\", path=\"..\/selectors-0.23.0\"\}  /"	\
# 	|sed -e "s/\"1.0.6\"/{version=\">=1.0.6\", path=\"..\/slotmap-1.0.6\"\}  /"	\
# 	|sed -e "s/\"0.9.0\"/{version=\"0.9.0\", path=\"..\/rust-unic-0.9.0\/unic\/ucd\" \}  /"	\
# 	|sed -e "s/\"0.1.37\"/{version=\"0.1.37\", path=\"..\/tracing-tracing-0.1.37\/tracing\" \}  /"	\
# 	>$F



-------------------




cat /proc/1/smaps |grep -i pagesize  |sort -u
KernelPageSize:        4 kB


/proc/self/statm


https://www.kernel.org/doc/Documentation/filesystems/proc.txt

Table 1-3: Contents of the statm files (as of 2.6.8-rc3)
..............................................................................
 Field    Content
 size     total program size (pages)		(same as VmSize in status)
 resident size of memory portions (pages)	(same as VmRSS in status)
 shared   number of pages that are shared	(i.e. backed by a file, same
						as RssFile+RssShmem in status)
 trs      number of pages that are 'code'	(not including libs; broken,
							includes data segment)
 lrs      number of pages of library		(always 0 on 2.6)
 drs      number of pages of data/stack		(including libs; broken,
							includes library text)
 dt       number of dirty pages			(always 0 on 2.6)
..............................................................................
